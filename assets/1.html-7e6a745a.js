const n=JSON.parse('{"key":"v-0b54ab79","path":"/posts/JS/1.html","title":"原型和原型链","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","cover":"/assets/images/JS.png","date":"2022-10-03T00:00:00.000Z","category":["JS"],"tag":["JS原理"],"description":"原型和原型链 原型链是JavaScript中对象之间的关系模型，每个对象都有其原型对象的链接，如果在某个对象上找不到某个属性或方法他会沿原型向上查找直到找到如果没有则返回undefined function Person(name, age) { this.name = name; this.age = age; } Person.prototype.sayHello = function() { console.log(\\"Hello, my name is \\" + this.name); } var person1 = new Person(\\"Alice\\", 25); person1.sayHello(); // 输出 \\"Hello, my name is Alice\\"","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/JS/1.html"}],["meta",{"property":"og:site_name","content":"3621"}],["meta",{"property":"og:title","content":"原型和原型链"}],["meta",{"property":"og:description","content":"原型和原型链 原型链是JavaScript中对象之间的关系模型，每个对象都有其原型对象的链接，如果在某个对象上找不到某个属性或方法他会沿原型向上查找直到找到如果没有则返回undefined function Person(name, age) { this.name = name; this.age = age; } Person.prototype.sayHello = function() { console.log(\\"Hello, my name is \\" + this.name); } var person1 = new Person(\\"Alice\\", 25); person1.sayHello(); // 输出 \\"Hello, my name is Alice\\""}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/images/JS.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-08T09:40:39.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"原型和原型链"}],["meta",{"property":"article:author","content":"no-3621"}],["meta",{"property":"article:tag","content":"JS原理"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-08T09:40:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型和原型链\\",\\"image\\":[\\"https://mister-hope.github.io/assets/images/JS.png\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-08T09:40:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"no-3621\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[],"git":{"createdTime":1686217239000,"updatedTime":1686217239000,"contributors":[{"name":"as3621","email":"1204846742@qq.com","commits":1}]},"readingTime":{"minutes":2.76,"words":829},"filePathRelative":"posts/JS/1.md","localizedDate":"2022年10月3日","excerpt":"<h1> 原型和原型链</h1>\\n<p>原型链是JavaScript中对象之间的关系模型，每个对象都有其原型对象的链接，如果在某个对象上找不到某个属性或方法他会沿原型向上查找直到找到如果没有则返回undefined</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">name<span class=\\"token punctuation\\">,</span> age</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>age <span class=\\"token operator\\">=</span> age<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">sayHello</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello, my name is \\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">var</span> person1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Alice\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nperson1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sayHello</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 输出 \\"Hello, my name is Alice\\"</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
