const n=JSON.parse(`{"key":"v-0d098418","path":"/posts/JS/2.html","title":"手写深拷贝","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","cover":"/assets/images/JS.png","date":"2022-10-15T00:00:00.000Z","category":["JS"],"tag":["JS技巧","手写题"],"description":"手写深拷贝 function deepClone(obj, map = new WeakMap()){ // 如果传入的参数为 null 或者不是对象类型，则返回原始值 if (obj === null || typeof obj !== 'object') { return obj; } // 如果在 map 中已经存在该对象，则直接返回该对象的深层副本 if (map.has(obj)) { return map.get(obj); } // 创建一个新的空对象或数组来存储深复制结果 let newObj = Array.isArray(obj) ? [] : {}; // 处理 Symbol 属性 //Object.getOwnPropertySymbols() 方法获取原始对象中的所有符号属性 let symbols = Object.getOwnPropertySymbols(obj); for (let symbol of symbols) { newObj[symbol] = deepClone(obj[symbol], map); } // 将原始对象与新的深层副本关联起来，以便处理循环引用 map.set(obj, newObj); // 复制原始对象中的所有属性，并递归处理对象类型的属性 for (let key in obj) { //Object.prototype.hasOwnProperty.call(obj, key) 的作用是检查一个对象是否具有指定的属性。它是 JavaScript 中用于避免原型链上的属性干扰的一种常见技巧。 if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = deepClone(obj[key], map); } } // 返回新的深层副本 return newObj; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/JS/2.html"}],["meta",{"property":"og:site_name","content":"3621"}],["meta",{"property":"og:title","content":"手写深拷贝"}],["meta",{"property":"og:description","content":"手写深拷贝 function deepClone(obj, map = new WeakMap()){ // 如果传入的参数为 null 或者不是对象类型，则返回原始值 if (obj === null || typeof obj !== 'object') { return obj; } // 如果在 map 中已经存在该对象，则直接返回该对象的深层副本 if (map.has(obj)) { return map.get(obj); } // 创建一个新的空对象或数组来存储深复制结果 let newObj = Array.isArray(obj) ? [] : {}; // 处理 Symbol 属性 //Object.getOwnPropertySymbols() 方法获取原始对象中的所有符号属性 let symbols = Object.getOwnPropertySymbols(obj); for (let symbol of symbols) { newObj[symbol] = deepClone(obj[symbol], map); } // 将原始对象与新的深层副本关联起来，以便处理循环引用 map.set(obj, newObj); // 复制原始对象中的所有属性，并递归处理对象类型的属性 for (let key in obj) { //Object.prototype.hasOwnProperty.call(obj, key) 的作用是检查一个对象是否具有指定的属性。它是 JavaScript 中用于避免原型链上的属性干扰的一种常见技巧。 if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = deepClone(obj[key], map); } } // 返回新的深层副本 return newObj; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/images/JS.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-09T18:49:02.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"手写深拷贝"}],["meta",{"property":"article:author","content":"no-3621"}],["meta",{"property":"article:tag","content":"JS技巧"}],["meta",{"property":"article:tag","content":"手写题"}],["meta",{"property":"article:published_time","content":"2022-10-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-09T18:49:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"手写深拷贝\\",\\"image\\":[\\"https://mister-hope.github.io/assets/images/JS.png\\"],\\"datePublished\\":\\"2022-10-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-09T18:49:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"no-3621\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":3,"title":"weakmap是什么的解释并且解释has set get方法","slug":"weakmap是什么的解释并且解释has-set-get方法","link":"#weakmap是什么的解释并且解释has-set-get方法","children":[]},{"level":3,"title":"关于在symobls中用of循环而不用in的解释","slug":"关于在symobls中用of循环而不用in的解释","link":"#关于在symobls中用of循环而不用in的解释","children":[]}],"git":{"createdTime":1686217239000,"updatedTime":1686336542000,"contributors":[{"name":"as3621","email":"1204846742@qq.com","commits":2}]},"readingTime":{"minutes":2.68,"words":803},"filePathRelative":"posts/JS/2.md","localizedDate":"2022年10月15日","excerpt":"<h1> 手写深拷贝</h1>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">deepClone</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> map <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">WeakMap</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 如果传入的参数为 null 或者不是对象类型，则返回原始值</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>obj <span class=\\"token operator\\">===</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">||</span> <span class=\\"token keyword\\">typeof</span> obj <span class=\\"token operator\\">!==</span> <span class=\\"token string\\">'object'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> obj<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// 如果在 map 中已经存在该对象，则直接返回该对象的深层副本</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">has</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// 创建一个新的空对象或数组来存储深复制结果</span>\\n  <span class=\\"token keyword\\">let</span> newObj <span class=\\"token operator\\">=</span> Array<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isArray</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 处理 Symbol 属性</span>\\n  <span class=\\"token comment\\">//Object.getOwnPropertySymbols() 方法获取原始对象中的所有符号属性</span>\\n  <span class=\\"token keyword\\">let</span> symbols <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getOwnPropertySymbols</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> symbol <span class=\\"token keyword\\">of</span> symbols<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    newObj<span class=\\"token punctuation\\">[</span>symbol<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">deepClone</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">[</span>symbol<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> map<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// 将原始对象与新的深层副本关联起来，以便处理循环引用</span>\\n  map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> newObj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 复制原始对象中的所有属性，并递归处理对象类型的属性</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> key <span class=\\"token keyword\\">in</span> obj<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//Object.prototype.hasOwnProperty.call(obj, key) 的作用是检查一个对象是否具有指定的属性。它是 JavaScript 中用于避免原型链上的属性干扰的一种常见技巧。</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasOwnProperty</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      newObj<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">deepClone</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> map<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// 返回新的深层副本</span>\\n  <span class=\\"token keyword\\">return</span> newObj<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
