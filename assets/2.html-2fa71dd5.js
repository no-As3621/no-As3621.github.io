import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c,a as o,b as e,d as p,f as d}from"./app-662523a0.js";const s={},h=e("h1",{id:"computer和watch的区别",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#computer和watch的区别","aria-hidden":"true"},"#"),p(" Computer和watch的区别")],-1),r=e("p",null,"一、computer 当页面中有某些数据依赖其他数据进行变动的时候，可以使用计算属性。",-1),n=e("p",null,"需要注意的是，就算在data中没有直接声明出要计算的变量，也可以直接在computed中写入。",-1),u=e("p",null,"计算属性默认只有getter，可以在需要的时候自己设定setter：",-1),i=e("p",null,"是一个计算属性,类似于过滤器,对绑定到view的数据进行处理",-1),_=e("p",null,"二、watch watch是一个观察的动作",-1),m=e("p",null,"watch和computed很相似，watch用于观察和监听页面上的vue实例，当然在大部分情况下我们都会使用computed，但如果要在数据变化的同时进行异步操作或者是比较大的开销，那么watch为最佳选择。",-1),l=e("p",null,"watch为一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。直接引用文档例子",-1),w=d('<h2 id="计算属性computed" tabindex="-1"><a class="header-anchor" href="#计算属性computed" aria-hidden="true">#</a> 计算属性computed</h2><p>支持缓存，只有依赖数据发生改变，才会重新进行计算</p><p>不支持异步，当computed内有异步操作时无效，无法监听数据的变化</p><p>computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值</p><p>如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed</p><p>如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。</p><h2 id="侦听属性watch" tabindex="-1"><a class="header-anchor" href="#侦听属性watch" aria-hidden="true">#</a> 侦听属性watch</h2><p>不支持缓存，数据变，直接会触发相应的操作；</p><p>watch支持异步；</p><p>监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</p><p>当一个属性发生变化时，需要执行对应的操作；一对多；</p><p>监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数</p><p>immediate：组件加载立即触发回调函数执行，</p><p>deep: 深度监听，为了发现对象内部值的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做。注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到。</p>',14);function f(x,v){return a(),c("div",null,[h,r,n,u,i,_,m,l,o(" more "),w])}const V=t(s,[["render",f],["__file","2.html.vue"]]);export{V as default};
