import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-662523a0.js";const t={},e=p(`<h1 id="手写深拷贝" tabindex="-1"><a class="header-anchor" href="#手写深拷贝" aria-hidden="true">#</a> 手写深拷贝</h1><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 如果传入的参数为 null 或者不是对象类型，则返回原始值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 如果在 map 中已经存在该对象，则直接返回该对象的深层副本</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建一个新的空对象或数组来存储深复制结果</span>
  <span class="token keyword">let</span> newObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 处理 Symbol 属性</span>
  <span class="token comment">//Object.getOwnPropertySymbols() 方法获取原始对象中的所有符号属性</span>
  <span class="token keyword">let</span> symbols <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> symbol <span class="token keyword">of</span> symbols<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newObj<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 将原始对象与新的深层副本关联起来，以便处理循环引用</span>
  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 复制原始对象中的所有属性，并递归处理对象类型的属性</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//Object.prototype.hasOwnProperty.call(obj, key) 的作用是检查一个对象是否具有指定的属性。它是 JavaScript 中用于避免原型链上的属性干扰的一种常见技巧。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 返回新的深层副本</span>
  <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="weakmap是什么的解释并且解释has-set-get方法" tabindex="-1"><a class="header-anchor" href="#weakmap是什么的解释并且解释has-set-get方法" aria-hidden="true">#</a> weakmap是什么的解释并且解释has set get方法</h3><p>WeakMap 是 JavaScript 中的一个内置对象，它是 Map 对象的一种变体。它与 Map 的差异在于，它只允许使用对象作为键，并且与这些键相关联的值必须是对象类型。</p><p>在深拷贝函数中，我们使用 map 参数来记录已经复制过的原始对象，以便正确处理循环引用。由于 WeakMap 只强制要求使用对象作为键，因此比普通的 Map 更适合用于这样的场景。</p><p>map.set(key, value) 方法用于向 map 中添加一对键值对，其中 key 是要添加的键，value 是要添加的值。在深拷贝函数中，我们使用 map.set(obj, newObj) 将原始对象和新的深层副本进行关联，以便处理循环引用。</p><p>map.has(key) 方法用于检查 map 是否包含给定的键。在深拷贝函数中，我们使用 map.has(obj) 检查 map 是否已经包含了正在复制的对象，以避免无限递归。</p><p>map.get(key) 方法用于从 map 中获取与给定键关联的值。在深拷贝函数中，我们使用 map.get(obj) 获取已经创建的深层副本以供返回。</p><h3 id="关于在symobls中用of循环而不用in的解释" tabindex="-1"><a class="header-anchor" href="#关于在symobls中用of循环而不用in的解释" aria-hidden="true">#</a> 关于在symobls中用of循环而不用in的解释</h3><p>for...in 循环用于遍历对象的可枚举属性，包括字符串属性和符号属性。而 for...of 循环则是 ES6 中引入的一种新语法，用于遍历可迭代对象（如数组、字符串等）。</p><p>在这个特定的代码中，我们使用 Object.getOwnPropertySymbols() 方法获取原始对象中的所有符号属性，并在新的深层副本中进行复制。因为符号属性不是字符串类型的键名，所以不能使用 for...in 循环来遍历它们。相反，我们使用 for...of 循环来遍历 symbols 数组中的每个符号属性。在循环中，我们使用 newObj[symbol] = deepClone(obj[symbol], map) 将每个符号属性及其值添加到新的深层副本中</p>`,11),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","2.html.vue"]]);export{r as default};
