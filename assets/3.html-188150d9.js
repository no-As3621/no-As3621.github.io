import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-662523a0.js";const e={},c=t(`<h1 id="class和function" tabindex="-1"><a class="header-anchor" href="#class和function" aria-hidden="true">#</a> class和function</h1><p>class和function都是用来创建对象的</p><p>但是class是一种特殊的function，它可以定义对象的属性和方法，也可以实现继承和多态等面向对象的特性</p><p>function则是一种更基础的方式，它只能定义对象的属性和方法，不能实现继承和多态等特性。</p><h2 id="什么是继承和多态" tabindex="-1"><a class="header-anchor" href="#什么是继承和多态" aria-hidden="true">#</a> 什么是继承和多态？</h2><p>继承是指一个类可以从另一个类（称为父类或超类）继承属性和方法，从而实现代码的复用和扩展。继承可以体现类之间的层次结构和关系，也可以实现多层继承。</p><p>多态是指一个类的实例（称为子类或派生类）可以根据自己的特性，覆盖或重载父类的方法，从而表现出不同的行为。多态可以体现类之间的抽象和封装，也可以实现动态绑定。</p><h2 id="如何在class中定义静态方法" tabindex="-1"><a class="header-anchor" href="#如何在class中定义静态方法" aria-hidden="true">#</a> 如何在class中定义静态方法</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>静态方法用于创建实用程序函数，也就是不依赖于类的实例状态的函数。例如，可以用静态方法来创建或克隆对象，或者进行一些数学计算，或者进行一些输入输出操作等。静态方法的好处是可以直接通过类名来调用，不需要创建类的实例，也不需要绑定到特定的对象上</p></div><h3 id="在class中定义静态方法-可以使用static关键字来声明" tabindex="-1"><a class="header-anchor" href="#在class中定义静态方法-可以使用static关键字来声明" aria-hidden="true">#</a> 在class中定义静态方法，可以使用static关键字来声明</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">myStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态方法不能在类的实例上调用-而应该通过类本身调用" tabindex="-1"><a class="header-anchor" href="#静态方法不能在类的实例上调用-而应该通过类本身调用" aria-hidden="true">#</a> 静态方法不能在类的实例上调用，而应该通过类本身调用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>MyClass<span class="token punctuation">.</span><span class="token function">myStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
<span class="token keyword">let</span> myInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myInstance<span class="token punctuation">.</span><span class="token function">myStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态方法可以在类中的其他静态方法中使用this关键字来调用" tabindex="-1"><a class="header-anchor" href="#静态方法可以在类中的其他静态方法中使用this关键字来调用" aria-hidden="true">#</a> 静态方法可以在类中的其他静态方法中使用this关键字来调用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">myStaticMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">myStaticMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">myStaticMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态方法不能在类中的非静态方法中使用this关键字来调用-而应该使用类名或者this-constructor来调用" tabindex="-1"><a class="header-anchor" href="#静态方法不能在类中的非静态方法中使用this关键字来调用-而应该使用类名或者this-constructor来调用" aria-hidden="true">#</a> 静态方法不能在类中的非静态方法中使用this关键字来调用，而应该使用类名或者this.constructor来调用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">myStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">}</span>
  <span class="token function">myNonStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MyClass<span class="token punctuation">.</span><span class="token function">myStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">myStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">myStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以把静态方法理解为一种属于类的函数，它不需要访问类的实例的属性或方法，也不需要通过类的实例来调用，它只是利用了类的命名空间来组织代码。静态方法通常是一些与类相关但不依赖于类的具体状态的功能，它们可以提高代码的可读性和可维护性。</p></div>`,18),i=[c];function p(o,l){return s(),a("div",null,i)}const r=n(e,[["render",p],["__file","3.html.vue"]]);export{r as default};
