const t=JSON.parse('{"key":"v-0ebe5cb7","path":"/posts/JS/3.html","title":"class和function","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","cover":"/assets/images/JS.png","date":"2022-05-28T00:00:00.000Z","category":["JS"],"tag":["JS原理"],"description":"class和function class和function都是用来创建对象的 但是class是一种特殊的function，它可以定义对象的属性和方法，也可以实现继承和多态等面向对象的特性 function则是一种更基础的方式，它只能定义对象的属性和方法，不能实现继承和多态等特性。 什么是继承和多态？ 继承是指一个类可以从另一个类（称为父类或超类）继承属性和方法，从而实现代码的复用和扩展。继承可以体现类之间的层次结构和关系，也可以实现多层继承。 多态是指一个类的实例（称为子类或派生类）可以根据自己的特性，覆盖或重载父类的方法，从而表现出不同的行为。多态可以体现类之间的抽象和封装，也可以实现动态绑定。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/JS/3.html"}],["meta",{"property":"og:site_name","content":"3621"}],["meta",{"property":"og:title","content":"class和function"}],["meta",{"property":"og:description","content":"class和function class和function都是用来创建对象的 但是class是一种特殊的function，它可以定义对象的属性和方法，也可以实现继承和多态等面向对象的特性 function则是一种更基础的方式，它只能定义对象的属性和方法，不能实现继承和多态等特性。 什么是继承和多态？ 继承是指一个类可以从另一个类（称为父类或超类）继承属性和方法，从而实现代码的复用和扩展。继承可以体现类之间的层次结构和关系，也可以实现多层继承。 多态是指一个类的实例（称为子类或派生类）可以根据自己的特性，覆盖或重载父类的方法，从而表现出不同的行为。多态可以体现类之间的抽象和封装，也可以实现动态绑定。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/images/JS.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-08T17:08:49.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"class和function"}],["meta",{"property":"article:author","content":"no-3621"}],["meta",{"property":"article:tag","content":"JS原理"}],["meta",{"property":"article:published_time","content":"2022-05-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-08T17:08:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"class和function\\",\\"image\\":[\\"https://mister-hope.github.io/assets/images/JS.png\\"],\\"datePublished\\":\\"2022-05-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-08T17:08:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"no-3621\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"什么是继承和多态？","slug":"什么是继承和多态","link":"#什么是继承和多态","children":[]},{"level":2,"title":"如何在class中定义静态方法","slug":"如何在class中定义静态方法","link":"#如何在class中定义静态方法","children":[{"level":3,"title":"在class中定义静态方法，可以使用static关键字来声明","slug":"在class中定义静态方法-可以使用static关键字来声明","link":"#在class中定义静态方法-可以使用static关键字来声明","children":[]},{"level":3,"title":"静态方法不能在类的实例上调用，而应该通过类本身调用","slug":"静态方法不能在类的实例上调用-而应该通过类本身调用","link":"#静态方法不能在类的实例上调用-而应该通过类本身调用","children":[]},{"level":3,"title":"静态方法可以在类中的其他静态方法中使用this关键字来调用","slug":"静态方法可以在类中的其他静态方法中使用this关键字来调用","link":"#静态方法可以在类中的其他静态方法中使用this关键字来调用","children":[]},{"level":3,"title":"静态方法不能在类中的非静态方法中使用this关键字来调用，而应该使用类名或者this.constructor来调用","slug":"静态方法不能在类中的非静态方法中使用this关键字来调用-而应该使用类名或者this-constructor来调用","link":"#静态方法不能在类中的非静态方法中使用this关键字来调用-而应该使用类名或者this-constructor来调用","children":[]}]}],"git":{"createdTime":1686244129000,"updatedTime":1686244129000,"contributors":[{"name":"as3621","email":"1204846742@qq.com","commits":1}]},"readingTime":{"minutes":2.14,"words":643},"filePathRelative":"posts/JS/3.md","localizedDate":"2022年5月28日","excerpt":"<h1> class和function</h1>\\n<p>class和function都是用来创建对象的</p>\\n<p>但是class是一种特殊的function，它可以定义对象的属性和方法，也可以实现继承和多态等面向对象的特性</p>\\n<p>function则是一种更基础的方式，它只能定义对象的属性和方法，不能实现继承和多态等特性。</p>\\n<h2> 什么是继承和多态？</h2>\\n<p>继承是指一个类可以从另一个类（称为父类或超类）继承属性和方法，从而实现代码的复用和扩展。继承可以体现类之间的层次结构和关系，也可以实现多层继承。</p>\\n<p>多态是指一个类的实例（称为子类或派生类）可以根据自己的特性，覆盖或重载父类的方法，从而表现出不同的行为。多态可以体现类之间的抽象和封装，也可以实现动态绑定。</p>","autoDesc":true}');export{t as data};
