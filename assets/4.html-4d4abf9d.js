const n=JSON.parse(`{"key":"v-10733556","path":"/posts/JS/4.html","title":"js手写题（更新中）","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","cover":"/assets/images/JS.png","category":["JS"],"tag":["JS技巧","手写题"],"description":"js手写题（更新中） 模拟实现new操作符 function myNew (constructor, ...args) { // 1. 创建一个空对象，并将其原型指向构造函数的原型 let obj = Object.create(constructor.prototype); // 2. 将构造函数的this绑定到这个空对象，并执行构造函数的代码 let result = constructor.apply(obj, args); // 3. 如果构造函数返回了一个对象，那么返回这个对象，否则返回创建的空对象 return result instanceof Object ? result : obj; } // 定义一个构造函数 function Person (name, age) { this.name = name; this.age = age; } // 使用myNew来创建一个Person的实例 let p = myNew(Person, 'Tom', 18); // 打印p的属性 console.log(p.name); // Tom console.log(p.age); // 18 //至此成功用myNew来替代new操作符","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/JS/4.html"}],["meta",{"property":"og:site_name","content":"3621"}],["meta",{"property":"og:title","content":"js手写题（更新中）"}],["meta",{"property":"og:description","content":"js手写题（更新中） 模拟实现new操作符 function myNew (constructor, ...args) { // 1. 创建一个空对象，并将其原型指向构造函数的原型 let obj = Object.create(constructor.prototype); // 2. 将构造函数的this绑定到这个空对象，并执行构造函数的代码 let result = constructor.apply(obj, args); // 3. 如果构造函数返回了一个对象，那么返回这个对象，否则返回创建的空对象 return result instanceof Object ? result : obj; } // 定义一个构造函数 function Person (name, age) { this.name = name; this.age = age; } // 使用myNew来创建一个Person的实例 let p = myNew(Person, 'Tom', 18); // 打印p的属性 console.log(p.name); // Tom console.log(p.age); // 18 //至此成功用myNew来替代new操作符"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/images/JS.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-11T16:13:18.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"js手写题（更新中）"}],["meta",{"property":"article:author","content":"no-3621"}],["meta",{"property":"article:tag","content":"JS技巧"}],["meta",{"property":"article:tag","content":"手写题"}],["meta",{"property":"article:modified_time","content":"2023-06-11T16:13:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js手写题（更新中）\\",\\"image\\":[\\"https://mister-hope.github.io/assets/images/JS.png\\"],\\"dateModified\\":\\"2023-06-11T16:13:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"no-3621\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"模拟实现new操作符","slug":"模拟实现new操作符","link":"#模拟实现new操作符","children":[]},{"level":2,"title":"手写call、apply、bind","slug":"手写call、apply、bind","link":"#手写call、apply、bind","children":[{"level":3,"title":"call","slug":"call","link":"#call","children":[]},{"level":3,"title":"apply","slug":"apply","link":"#apply","children":[]},{"level":3,"title":"bind","slug":"bind","link":"#bind","children":[]}]},{"level":2,"title":"柯里化函数","slug":"柯里化函数","link":"#柯里化函数","children":[]},{"level":2,"title":"节流和防抖","slug":"节流和防抖","link":"#节流和防抖","children":[{"level":3,"title":"节流","slug":"节流","link":"#节流","children":[]},{"level":3,"title":"防抖","slug":"防抖","link":"#防抖","children":[]}]}],"git":{"createdTime":1686336542000,"updatedTime":1686499998000,"contributors":[{"name":"as3621","email":"1204846742@qq.com","commits":3}]},"readingTime":{"minutes":6.54,"words":1962},"filePathRelative":"posts/JS/4.md","localizedDate":"2023年6月9日","excerpt":"<h1> js手写题（更新中）</h1>\\n<h2> 模拟实现new操作符</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">myNew</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">constructor<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">...</span>args</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 1. 创建一个空对象，并将其原型指向构造函数的原型</span>\\n  <span class=\\"token keyword\\">let</span> obj <span class=\\"token operator\\">=</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span>constructor<span class=\\"token punctuation\\">.</span>prototype<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 2. 将构造函数的this绑定到这个空对象，并执行构造函数的代码</span>\\n  <span class=\\"token keyword\\">let</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">apply</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 3. 如果构造函数返回了一个对象，那么返回这个对象，否则返回创建的空对象</span>\\n  <span class=\\"token keyword\\">return</span> result <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">Object</span> <span class=\\"token operator\\">?</span> result <span class=\\"token operator\\">:</span> obj<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 定义一个构造函数</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Person</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">name<span class=\\"token punctuation\\">,</span> age</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>age <span class=\\"token operator\\">=</span> age<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 使用myNew来创建一个Person的实例</span>\\n<span class=\\"token keyword\\">let</span> p <span class=\\"token operator\\">=</span> <span class=\\"token function\\">myNew</span><span class=\\"token punctuation\\">(</span>Person<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Tom'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 打印p的属性</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Tom</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">.</span>age<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 18</span>\\n<span class=\\"token comment\\">//至此成功用myNew来替代new操作符</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
