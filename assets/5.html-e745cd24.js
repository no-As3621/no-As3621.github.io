const n=JSON.parse(`{"key":"v-12280df5","path":"/posts/JS/5.html","title":"js常用设计模式","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","cover":"/assets/images/JS.png","date":"2023-01-16T00:00:00.000Z","category":["JS"],"tag":["JS项目技巧"],"description":"js常用设计模式 单例模式 这种模式用来保证一个类只有一个实例，并提供一个全局访问点。 这样可以避免创建多个相同的对象，节省内存和资源。 js中实现单例模式的一种方法是使用一个变量来标识该类是否被实例化，如果已经实例化，就直接返回该实例，否则就创建一个新的实例并返回 // 单例模式 var Singleton = (function() { // 私有变量，保存唯一实例对象 var instance; // 私有构造函数，创建实例对象 function createInstance() { return { name: \\"Alice\\", sayHello: function() { console.log(\\"Hello, I'm \\" + this.name); } }; } // 公开接口，获取实例对象 return { getInstance: function() { if (!instance) { // 如果未初始化，则创建实例对象 instance = createInstance(); } return instance; // 返回实例对象的引用 } }; })(); var a = Singleton.getInstance(); var b = Singleton.getInstance(); console.log(a === b); // true a.sayHello(); // Hello, I'm Alice b.name = \\"Bob\\"; a.sayHello(); // Hello, I'm Bob","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/JS/5.html"}],["meta",{"property":"og:site_name","content":"3621"}],["meta",{"property":"og:title","content":"js常用设计模式"}],["meta",{"property":"og:description","content":"js常用设计模式 单例模式 这种模式用来保证一个类只有一个实例，并提供一个全局访问点。 这样可以避免创建多个相同的对象，节省内存和资源。 js中实现单例模式的一种方法是使用一个变量来标识该类是否被实例化，如果已经实例化，就直接返回该实例，否则就创建一个新的实例并返回 // 单例模式 var Singleton = (function() { // 私有变量，保存唯一实例对象 var instance; // 私有构造函数，创建实例对象 function createInstance() { return { name: \\"Alice\\", sayHello: function() { console.log(\\"Hello, I'm \\" + this.name); } }; } // 公开接口，获取实例对象 return { getInstance: function() { if (!instance) { // 如果未初始化，则创建实例对象 instance = createInstance(); } return instance; // 返回实例对象的引用 } }; })(); var a = Singleton.getInstance(); var b = Singleton.getInstance(); console.log(a === b); // true a.sayHello(); // Hello, I'm Alice b.name = \\"Bob\\"; a.sayHello(); // Hello, I'm Bob"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/images/JS.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-14T12:54:00.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"js常用设计模式"}],["meta",{"property":"article:author","content":"no-3621"}],["meta",{"property":"article:tag","content":"JS项目技巧"}],["meta",{"property":"article:published_time","content":"2023-01-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-14T12:54:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js常用设计模式\\",\\"image\\":[\\"https://mister-hope.github.io/assets/images/JS.png\\"],\\"datePublished\\":\\"2023-01-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-14T12:54:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"no-3621\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":2,"title":"构造器模式","slug":"构造器模式","link":"#构造器模式","children":[]},{"level":2,"title":"模块化模式","slug":"模块化模式","link":"#模块化模式","children":[]},{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":2,"title":"发布/订阅模式","slug":"发布-订阅模式","link":"#发布-订阅模式","children":[]}],"git":{"createdTime":1686747240000,"updatedTime":1686747240000,"contributors":[{"name":"as3621","email":"1204846742@qq.com","commits":1}]},"readingTime":{"minutes":5.68,"words":1705},"filePathRelative":"posts/JS/5.md","localizedDate":"2023年1月16日","excerpt":"<h1> js常用设计模式</h1>\\n<h2> 单例模式</h2>\\n<p>这种模式用来保证一个类只有一个实例，并提供一个全局访问点。</p>\\n<p>这样可以避免创建多个相同的对象，节省内存和资源。</p>\\n<p>js中实现单例模式的一种方法是使用一个变量来标识该类是否被实例化，如果已经实例化，就直接返回该实例，否则就创建一个新的实例并返回</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 单例模式</span>\\n<span class=\\"token keyword\\">var</span> Singleton <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 私有变量，保存唯一实例对象</span>\\n  <span class=\\"token keyword\\">var</span> instance<span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token comment\\">// 私有构造函数，创建实例对象</span>\\n  <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">createInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Alice\\"</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token function-variable function\\">sayHello</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello, I'm \\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n\\n  <span class=\\"token comment\\">// 公开接口，获取实例对象</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function-variable function\\">getInstance</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>instance<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 如果未初始化，则创建实例对象</span>\\n        instance <span class=\\"token operator\\">=</span> <span class=\\"token function\\">createInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">return</span> instance<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 返回实例对象的引用</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">var</span> a <span class=\\"token operator\\">=</span> Singleton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">var</span> b <span class=\\"token operator\\">=</span> Singleton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">===</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true</span>\\na<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sayHello</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Hello, I'm Alice</span>\\nb<span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Bob\\"</span><span class=\\"token punctuation\\">;</span>\\na<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sayHello</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Hello, I'm Bob</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
