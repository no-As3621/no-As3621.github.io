const n=JSON.parse(`{"key":"v-e6bbc5c2","path":"/posts/VUE/8.html","title":"vue2、3响应式原理手写","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","cover":"/assets/images/VUE.png","date":"2022-11-28T00:00:00.000Z","category":["VUE"],"tag":["vue原理"],"description":"vue2、3响应式原理手写 vue3手写响应式 手写Vue响应式，一种方法是使用 Proxy 对象来监听数据的变化，并通过 effect 函数来收集依赖和触发更新 // 定义一个响应式函数，接收一个目标对象和一个回调函数 function reactive(target, callback) { // 定义一个代理对象，使用Proxy构造函数 const proxy = new Proxy(target, { // 定义一个get方法，用于拦截目标对象的属性读取操作 get(target, key, receiver) { // 调用track函数，收集依赖 track(target, key); // 返回目标对象的属性值 return Reflect.get(target, key, receiver); }, // 定义一个set方法，用于拦截目标对象的属性赋值操作 set(target, key, value, receiver) { // 调用trigger函数，触发更新 trigger(target, key); // 调用回调函数，执行自定义逻辑 callback(); // 设置目标对象的属性值 return Reflect.set(target, key, value, receiver); } }); // 返回代理对象 return proxy; } // 定义一个全局的Map对象，用于存储目标对象和它们的依赖关系 const targetMap = new Map(); // 定义一个全局的effect函数，用于执行副作用操作 let effect; // 定义一个track函数，用于收集依赖 function track(target, key) { // 如果没有定义effect函数，直接返回 if (!effect) return; // 获取目标对象对应的Map对象，如果没有就创建一个空的Map对象 let depsMap = targetMap.get(target); if (!depsMap) { depsMap = new Map(); targetMap.set(target, depsMap); } // 获取属性对应的Set对象，如果没有就创建一个空的Set对象 let dep = depsMap.get(key); if (!dep) { dep = new Set(); depsMap.set(key, dep); } // 把effect函数添加到Set对象中，表示该属性依赖于该effect函数 dep.add(effect); } // 定义一个trigger函数，用于触发更新 function trigger(target, key) { // 获取目标对象对应的Map对象，如果没有就返回 const depsMap = targetMap.get(target); if (!depsMap) return; // 获取属性对应的Set对象，如果没有就返回 const dep = depsMap.get(key); if (!dep) return; // 遍历Set对象中的所有effect函数，并执行它们 for (const effect of dep) { effect(); } } // 创建一个普通对象 const data = { name: 'Tom', age: 18 }; // 调用响应式函数，传入普通对象和一个回调函数，在回调函数中打印一条信息 const proxyData = reactive(data, () =&gt; { console.log('data changed'); }); // 定义一个effect函数，在其中打印代理对象的name属性值 effect = () =&gt; { console.log(proxyData.name); }; // 执行一次effect函数，并收集依赖 effect(); // 修改代理对象的name属性值，并触发更新 proxyData.name = 'Jerry'; // 输出结果： // Tom // data changed // Jerry","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/VUE/8.html"}],["meta",{"property":"og:site_name","content":"3621"}],["meta",{"property":"og:title","content":"vue2、3响应式原理手写"}],["meta",{"property":"og:description","content":"vue2、3响应式原理手写 vue3手写响应式 手写Vue响应式，一种方法是使用 Proxy 对象来监听数据的变化，并通过 effect 函数来收集依赖和触发更新 // 定义一个响应式函数，接收一个目标对象和一个回调函数 function reactive(target, callback) { // 定义一个代理对象，使用Proxy构造函数 const proxy = new Proxy(target, { // 定义一个get方法，用于拦截目标对象的属性读取操作 get(target, key, receiver) { // 调用track函数，收集依赖 track(target, key); // 返回目标对象的属性值 return Reflect.get(target, key, receiver); }, // 定义一个set方法，用于拦截目标对象的属性赋值操作 set(target, key, value, receiver) { // 调用trigger函数，触发更新 trigger(target, key); // 调用回调函数，执行自定义逻辑 callback(); // 设置目标对象的属性值 return Reflect.set(target, key, value, receiver); } }); // 返回代理对象 return proxy; } // 定义一个全局的Map对象，用于存储目标对象和它们的依赖关系 const targetMap = new Map(); // 定义一个全局的effect函数，用于执行副作用操作 let effect; // 定义一个track函数，用于收集依赖 function track(target, key) { // 如果没有定义effect函数，直接返回 if (!effect) return; // 获取目标对象对应的Map对象，如果没有就创建一个空的Map对象 let depsMap = targetMap.get(target); if (!depsMap) { depsMap = new Map(); targetMap.set(target, depsMap); } // 获取属性对应的Set对象，如果没有就创建一个空的Set对象 let dep = depsMap.get(key); if (!dep) { dep = new Set(); depsMap.set(key, dep); } // 把effect函数添加到Set对象中，表示该属性依赖于该effect函数 dep.add(effect); } // 定义一个trigger函数，用于触发更新 function trigger(target, key) { // 获取目标对象对应的Map对象，如果没有就返回 const depsMap = targetMap.get(target); if (!depsMap) return; // 获取属性对应的Set对象，如果没有就返回 const dep = depsMap.get(key); if (!dep) return; // 遍历Set对象中的所有effect函数，并执行它们 for (const effect of dep) { effect(); } } // 创建一个普通对象 const data = { name: 'Tom', age: 18 }; // 调用响应式函数，传入普通对象和一个回调函数，在回调函数中打印一条信息 const proxyData = reactive(data, () =&gt; { console.log('data changed'); }); // 定义一个effect函数，在其中打印代理对象的name属性值 effect = () =&gt; { console.log(proxyData.name); }; // 执行一次effect函数，并收集依赖 effect(); // 修改代理对象的name属性值，并触发更新 proxyData.name = 'Jerry'; // 输出结果： // Tom // data changed // Jerry"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/images/VUE.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-08T17:08:49.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"vue2、3响应式原理手写"}],["meta",{"property":"article:author","content":"no-3621"}],["meta",{"property":"article:tag","content":"vue原理"}],["meta",{"property":"article:published_time","content":"2022-11-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-08T17:08:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue2、3响应式原理手写\\",\\"image\\":[\\"https://mister-hope.github.io/assets/images/VUE.png\\"],\\"datePublished\\":\\"2022-11-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-08T17:08:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"no-3621\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"vue3手写响应式","slug":"vue3手写响应式","link":"#vue3手写响应式","children":[]},{"level":2,"title":"vue2手写响应式","slug":"vue2手写响应式","link":"#vue2手写响应式","children":[]}],"git":{"createdTime":1686244129000,"updatedTime":1686244129000,"contributors":[{"name":"as3621","email":"1204846742@qq.com","commits":1}]},"readingTime":{"minutes":6.71,"words":2013},"filePathRelative":"posts/VUE/8.md","localizedDate":"2022年11月28日","excerpt":"<h1> vue2、3响应式原理手写</h1>\\n<h2> vue3手写响应式</h2>\\n<p>手写Vue响应式，一种方法是使用 Proxy 对象来监听数据的变化，并通过 effect 函数来收集依赖和触发更新</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 定义一个响应式函数，接收一个目标对象和一个回调函数</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">reactive</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">target<span class=\\"token punctuation\\">,</span> callback</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 定义一个代理对象，使用Proxy构造函数</span>\\n  <span class=\\"token keyword\\">const</span> proxy <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 定义一个get方法，用于拦截目标对象的属性读取操作</span>\\n    <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 调用track函数，收集依赖</span>\\n      <span class=\\"token function\\">track</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// 返回目标对象的属性值</span>\\n      <span class=\\"token keyword\\">return</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\">// 定义一个set方法，用于拦截目标对象的属性赋值操作</span>\\n    <span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 调用trigger函数，触发更新</span>\\n      <span class=\\"token function\\">trigger</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// 调用回调函数，执行自定义逻辑</span>\\n      <span class=\\"token function\\">callback</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token comment\\">// 设置目标对象的属性值</span>\\n      <span class=\\"token keyword\\">return</span> Reflect<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">,</span> receiver<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 返回代理对象</span>\\n  <span class=\\"token keyword\\">return</span> proxy<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 定义一个全局的Map对象，用于存储目标对象和它们的依赖关系</span>\\n<span class=\\"token keyword\\">const</span> targetMap <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 定义一个全局的effect函数，用于执行副作用操作</span>\\n<span class=\\"token keyword\\">let</span> effect<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 定义一个track函数，用于收集依赖</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">track</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">target<span class=\\"token punctuation\\">,</span> key</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 如果没有定义effect函数，直接返回</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>effect<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 获取目标对象对应的Map对象，如果没有就创建一个空的Map对象</span>\\n  <span class=\\"token keyword\\">let</span> depsMap <span class=\\"token operator\\">=</span> targetMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>depsMap<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    depsMap <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    targetMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> depsMap<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 获取属性对应的Set对象，如果没有就创建一个空的Set对象</span>\\n  <span class=\\"token keyword\\">let</span> dep <span class=\\"token operator\\">=</span> depsMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>dep<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    dep <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Set</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    depsMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> dep<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// 把effect函数添加到Set对象中，表示该属性依赖于该effect函数</span>\\n  dep<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>effect<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 定义一个trigger函数，用于触发更新</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">trigger</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">target<span class=\\"token punctuation\\">,</span> key</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// 获取目标对象对应的Map对象，如果没有就返回</span>\\n  <span class=\\"token keyword\\">const</span> depsMap <span class=\\"token operator\\">=</span> targetMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>depsMap<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 获取属性对应的Set对象，如果没有就返回</span>\\n  <span class=\\"token keyword\\">const</span> dep <span class=\\"token operator\\">=</span> depsMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>dep<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">// 遍历Set对象中的所有effect函数，并执行它们</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> effect <span class=\\"token keyword\\">of</span> dep<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">effect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 创建一个普通对象</span>\\n<span class=\\"token keyword\\">const</span> data <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'Tom'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">18</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 调用响应式函数，传入普通对象和一个回调函数，在回调函数中打印一条信息</span>\\n<span class=\\"token keyword\\">const</span> proxyData <span class=\\"token operator\\">=</span> <span class=\\"token function\\">reactive</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'data changed'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 定义一个effect函数，在其中打印代理对象的name属性值</span>\\n<span class=\\"token function-variable function\\">effect</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>proxyData<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 执行一次effect函数，并收集依赖</span>\\n<span class=\\"token function\\">effect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 修改代理对象的name属性值，并触发更新</span>\\nproxyData<span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'Jerry'</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 输出结果：</span>\\n<span class=\\"token comment\\">// Tom</span>\\n<span class=\\"token comment\\">// data changed</span>\\n<span class=\\"token comment\\">// Jerry</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
